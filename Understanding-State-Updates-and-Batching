Code 1 Analysis:
The reason console.log(count) shows the older value of count is because the setCount function in React's useState is asynchronous. When we call setCount(count + 1), 
it schedules an update to the state, but the new value of count is not immediately reflected.

To log the updated count value, we should use the useEffect hook, which allows us to perform side effects in function components. Here's an updated version of the code:

import React, { useState, useEffect } from 'react';

function App() { 
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log(count); // This will log the updated count value
  }, [count]);

  const handleClick = () => { 
    setCount(count + 1); 
  };

  return (
    <div>
      <p>Button is clicked {count} times</p>
      <button onClick={handleClick}>Click Me</button>
    </div>
  );
}

export default App;
In this version, the useEffect hook is used to log the updated value of count whenever it changes. The second parameter [count] ensures that the effect runs only when the 
count variable changes.

Code 2 Analysis:
In React, the useState hook's setCount function does not immediately update the state. Instead, it schedules an asynchronous update, and the state might not be updated 
immediately after the call. This is due to React's batching mechanism, where multiple state updates in the same synchronous block are batched together for performance 
reasons.

The problematic code is:

const handleClick = () => { 
  setCount(count + 1); 
  setCount(count + 1); 
  setCount(count + 1); 
  console.log(count); 
};
The three setCount calls are effectively executed in the same synchronous batch, and since React batches them, the state is not updated immediately after each call. 
Therefore, when we log count immediately after the three setCount calls, it still reflects the old state.

To achieve the expected behavior and log the updated count value, we can use the functional form of the setCount function, which receives the previous state as an argument.
This ensures that each setCount call uses the latest state:

const handleClick = () => { 
  setCount(prevCount => prevCount + 1); 
  setCount(prevCount => prevCount + 1); 
  setCount(prevCount => prevCount + 1); 
  console.log(count); // This will log the previous state, not the updated one 
};
Now, each call to setCount will use the latest state, and when we log count immediately after the calls, we will see the expected updated value.
